  Lab08: Trees Advanced
Capacidades
Implementar recorridos en árboles binarios
Realizar operaciones en recorridos de árboles binarios.

Seguridad
Generar un ambiente seguro.
Evitar el consumo de alimentos.
Dejar el ambiente ordenado y limpio.

Preparación
El alumno debe revisar previamente el material cargado.

Recursos
Computadora.

Instrucciones
Se debe distribuir el desarrollo del laboratorio entre los integrantes.
Subir el proyecto en un solo repositorio de GitHub.
Poner evidencia de su proyecto finalizando en la sección de desarrollo con el siguiente formato.
Nombre del alumno
Título del desarrollo
Captura del resultado
Prompt engineering (Si aplica)
Prompt ingresado y/o captura
Prompt de interacción  y/o captura
Código
Código desarrollado (Diagrama opcional)
Explicación de línea por línea con comentarios
Casos de prueba
Todo debe ser desarrollado en inglés.
Captura de la estructura de tu proyecto en VSC.

Ejercicio 1:






Ejercicio 2:






Ejercicio 3:









Ejercicio 4:

-This program performs a vertical order traversal on a binary tree. Specifically, it:
Builds binary trees from level-order lists (where each list represents node values level by level).


Assigns a horizontal distance (HD) to each node:


The root has HD = 0.


The left child has HD - 1.


The right child has HD + 1.


Uses Breadth-First Search (BFS) to traverse the tree and group nodes by their horizontal distance.


Sorts these groups by HD and returns a list of lists, where each sublist represents the vertical column of nodes from top to bottom, left to right.


from collections import defaultdict, deque

# Definition of a tree node
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

# Binary tree with helper method to build from a list
class BinaryTree:
    def __init__(self):
        self.root = None

    def build_tree_from_list(self, values):
        """Build a binary tree from a list using level-order insertion."""
        if not values:
            return None
        self.root = TreeNode(values[0])
        queue = deque([self.root])
        index = 1
        while queue and index < len(values):
            node = queue.popleft()
            # Add left child
            if index < len(values) and values[index] is not None:
                node.left = TreeNode(values[index])
                queue.append(node.left)
            index += 1
            # Add right child
            if index < len(values) and values[index] is not None:
                node.right = TreeNode(values[index])
                queue.append(node.right)
            index += 1

# Function to perform vertical order traversal
def vertical_order_traversal(root):
    """Return the vertical order traversal of a binary tree."""
    if not root:
        return []

    # Dictionary to store nodes grouped by horizontal distance (HD)
    column_table = defaultdict(list)
    # Queue for BFS: stores pairs (node, HD)
    queue = deque([(root, 0)])

    while queue:
        node, hd = queue.popleft()
        # Store the node value in the correct HD group
        column_table[hd].append(node.val)

        # Add left child with HD - 1
        if node.left:
            queue.append((node.left, hd - 1))
        # Add right child with HD + 1
        if node.right:
            queue.append((node.right, hd + 1))

    # Sort keys and extract node values in order
    return [column_table[x] for x in sorted(column_table.keys())]

# Test cases for vertical_order_traversal
def test_vertical_order_traversal():
    """Test the vertical_order_traversal function. 📏"""
    # Test Case 1: Normal binary tree 🌳
    tree1 = BinaryTree()
    tree1.build_tree_from_list([1, 2, 3, 4, 5, None, 6])
    result1 = vertical_order_traversal(tree1.root)
    print("Test 1:", result1)  # Expected: [[4], [2], [1, 5], [3], [6]]

    # Test Case 2: Vertical line tree 📏
    tree2 = BinaryTree()
    tree2.build_tree_from_list([1, 2, None, 3])
    result2 = vertical_order_traversal(tree2.root)
    print("Test 2:", result2)  # Expected: [[3], [2], [1]]

    # Test Case 3: Empty tree 🈳
    tree3 = BinaryTree()
    result3 = vertical_order_traversal(tree3.root)
    print("Test 3:", result3)  # Expected: []

    # Test Case 4: Single node tree 🌱
    tree4 = BinaryTree()
    tree4.build_tree_from_list([1])
    result4 = vertical_order_traversal(tree4.root)
    print("Test 4:", result4)  # Expected: [[1]]

    # Test Case 5: Complete binary tree 🌳
    tree5 = BinaryTree()
    tree5.build_tree_from_list([1, 2, 3, 4, 5, 6, 7])
    result5 = vertical_order_traversal(tree5.root)
    print("Test 5:", result5)  # Expected: [[4], [2], [1, 5, 6], [3], [7]]

# Run the test
test_vertical_order_traversal()





Ejercicio 5

-This code defines a binary tree and a function prune_tree that traverses the tree in post-order (children first, then the parent) to remove all subtrees that do not contain a specified target value. 
If a node does not have any useful children (i.e., neither the node itself nor any of its descendants contain the target value), it is removed by returning None. The code includes a practical example 
where a tree is built, printed in inorder (left, root, right), pruned based on the value 1, and then printed again. In the end, only the nodes that directly or indirectly contain the value 1 remain in
the tree.

class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left = None
        self.right = None

def prune_tree(root, target):
    if not root:
        return None

    root.left = prune_tree(root.left, target)
    root.right = prune_tree(root.right, target)

    if root.val != target and root.left is None and root.right is None:
        return None

    return root

def print_inorder(node):
    if not node:
        return
    print_inorder(node.left)
    print(node.val, end=" ")
    print_inorder(node.right)
# 🧪 EJEMPLO DE USO:
# Árbol original:
#         1
#        / \
#       2   3
#      /     \
#     0       0
root = TreeNode(1)
root.left = TreeNode(2)
root.left.left = TreeNode(0)
root.right = TreeNode(3)
root.right.right = TreeNode(0)

print("Árbol original (inorden):")
print_inorder(root)
print()
pruned = prune_tree(root, 1)
print(" Árbol podado (inorden):")
print_inorder(pruned)
print()








